/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lab1;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.xml.bind.JAXBException;
import javax.xml.stream.XMLStreamException;
import java.io.IOException;
import java.io.InputStream;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;

import java.sql.DriverManager;
import java.util.concurrent.atomic.AtomicInteger;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class App {
    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) {
        SpringApplication.run(App.class, args);

        Logger logger = LoggerFactory.getLogger(App.class);
//        logger.info("Hello World");
//        try {
////        InputStream xmlInputStream = OSMXmlStAXbz2Reader.getInputStreamFromBz2(
////                    ClassLoader.getSystemResource("RU-NVS.osm.bz2").toURI()
////            );
//            InputStream xmlInputStream = Files.newInputStream(
//                    Paths.get(ClassLoader.getSystemResource("example.xml").toURI()));
//            App.StAXParse(logger, xmlInputStream);
//
//            //App.JAXBParse(logger, xmlInputStream);
//            xmlInputStream.close();
//        }
//        catch(URISyntaxException | IOException ex) {
//            ex.printStackTrace();
//        }
//
//        try {
//            Class.forName("org.postgresql.Driver");
//        } catch (ClassNotFoundException cnfe) {
//            System.err.println("Not found postgree driver");
//            return;
//        }

        try {
            Connection connection = DriverManager.getConnection(
                    "jdbc:postgresql://localhost:5432/advanced_java",
                    "postgres",
                    "51522"
            );

            connection.setAutoCommit(false);

            AtomicInteger realAmount = new AtomicInteger(1000);

            Thread first = new Thread(() -> {
                try (Statement statement = connection.createStatement()) {
                    String query = "UPDATE accounts SET amount = amount + 1 WHERE id = 1";

                    for (int i = 0; i < 1000; i++) {
                        statement.executeUpdate(query);
                        connection.commit();
                        realAmount.incrementAndGet();
                    }
                } catch (SQLException exc) {
                    exc.printStackTrace();
                }
            });

            Thread second = new Thread(() -> {
                try (Statement statement = connection.createStatement()) {
                    String query = "UPDATE accounts SET amount = amount - 1 WHERE id = 1";

                    for (int i = 0; i < 1000; i++) {
                        statement.executeUpdate(query);
                        connection.commit();
                        realAmount.decrementAndGet();
                    }
                } catch (SQLException exc) {
                    exc.printStackTrace();
                }
            });

            first.start();
            second.start();
            first.join();
            second.join();
            logger.info(realAmount.toString());
        } catch (Exception se) {
            se.printStackTrace();
        }

    }

    private static void StAXParse(Logger logger, InputStream xmlInputStream) {
        try {
            OSMXmlStAXParser parser = new OSMXmlStAXParser(xmlInputStream);
            HashMap<String, UserData> stats = parser.deriveStatistics().getUsersStats();
            for (String username : stats.keySet()) {
                UserData userData = stats.get(username);
                StringBuilder entryBuilder = new StringBuilder()
                        .append(userData.getUsername())
                        .append(": ")
                        .append(userData.getAlterationsCount());
                logger.info(entryBuilder.toString());
            }
        }
        catch(XMLStreamException ex) {
            ex.printStackTrace();
        }
    }

    public static void JAXBParse(Logger logger, InputStream xmlInputStream) {
        try {
            OSMXmlJAXBParser parser = new OSMXmlJAXBParser(xmlInputStream);
            HashMap<String, UserData> stats = parser.deriveStatistics().getUsersStats();
            for (String username : stats.keySet()) {
                UserData userData = stats.get(username);
                StringBuilder entryBuilder = new StringBuilder()
                        .append(userData.getUsername())
                        .append(": ")
                        .append(userData.getAlterationsCount());
                logger.info(entryBuilder.toString());
            }
        }
        catch(XMLStreamException | JAXBException ex) {
            ex.printStackTrace();
        }
    }
}
